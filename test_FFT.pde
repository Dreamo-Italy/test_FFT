/**
  * This sketch demonstrates how to use an FFT to analyze
  * the audio being generated by an AudioPlayer.
  * <p>
  * FFT stands for Fast Fourier Transform, which is a 
  * method of analyzing audio that allows you to visualize 
  * the frequency content of a signal. You've seen 
  * visualizations like this before in music players 
  * and car stereos.
  * <p>
  * For more information about Minim and additional features, 
  * visit http://code.compartmental.net/minim/
  */

import ddf.minim.analysis.*;
import ddf.minim.*;

Minim       minim;
AudioPlayer jingle;
FFT         fft;

int spectrumScale=200;
int BAND_NUM = 4;

void setup()
{
  size(512, 400, P3D);
  
  minim = new Minim(this);
  
  // specify that we want the audio buffers of the AudioPlayer
  // to be 1024 samples long because our FFT needs to have 
  // a power-of-two buffer size and this is a good size.
  jingle = minim.loadFile("song_electronic.mp3", 1024);
  
  // loop the file indefinitely
  jingle.play();
  
  // create an FFT object that has a time-domain buffer 
  // the same size as jingle's sample buffer
  // note that this needs to be a power of two 
  // and that it means the size of the spectrum will be half as large.
  fft = new FFT( jingle.bufferSize(), jingle.sampleRate() );
  //fft.linAverages(20000);
  
}

void draw()
{
  background(0);
  
  
  // perform a forward FFT on the samples in jingle's mix buffer,
  // which contains the mix of both the left and right channels of the file
  
  fft.forward( jingle.mix );
  int w = width / BAND_NUM;
  
  // println( "w ="+ w);
  
  
  
  float [] avgValue = { fft.calcAvg(0.0, 60.0), fft.calcAvg(60.0, 100.0), fft.calcAvg(100.0, 200.0), fft.calcAvg(200.0, 20100.0) };
  
  for(int i = 0; i < BAND_NUM; i++)
  {
    fill(255, 128,0);
    rect(i*w, height, w, height - (1+log(1+avgValue[i]))*spectrumScale);
    
    //println(log(1+fft.getAvg(i))*spectrumScale);
    
    println("amp " + i +": " +(1+log(1+avgValue[i])));
  }
  
  //println(fft.avgSize());
  
}